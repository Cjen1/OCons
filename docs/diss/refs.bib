@article{Lamport:1998:PP:279227.279229,
 author = {Lamport, Leslie},
 title = {The Part-time Parliament},
 journal = {ACM Trans. Comput. Syst.},
 issue_date = {May 1998},
 volume = {16},
 number = {2},
 month = may,
 year = {1998},
 issn = {0734-2071},
 pages = {133--169},
 numpages = {37},
 url = {http://doi.acm.org/10.1145/279227.279229},
 doi = {10.1145/279227.279229},
 acmid = {279229},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {state machines, three-phase commit, voting},
}

@article{paxos-made-simple,
author = {Lamport, Leslie},
title = {Paxos Made Simple},
booktitle = {},
year = {2001},
month = {December},
abstract = {At the PODC 2001 conference, I got tired of everyone saying how difficult it was to understand the Paxos algorithm, published in [122]. Although people got so hung up in the pseudo-Greek names that they found the paper hard to understand, the algorithm itself is very simple. So, I cornered a couple of people at the conference and explained the algorithm to them orally, with no paper. When I got home, I wrote down the explanation as a short note, which I later revised based on comments from Fred Schneider and Butler Lampson. The current version is 13 pages long, and contains no formula more complicated than n1 &gt; n2.},
publisher = {},
url = {https://www.microsoft.com/en-us/research/publication/paxos-made-simple/},
address = {},
pages = {51-58},
journal = {},
volume = {},
chapter = {},
isbn = {},
}

@article{VanRenesse:2015:PMM:2737799.2673577,
 author = {Van Renesse, Robbert and Altinbuken, Deniz},
 title = {Paxos Made Moderately Complex},
 journal = {ACM Comput. Surv.},
 issue_date = {April 2015},
 volume = {47},
 number = {3},
 month = feb,
 year = {2015},
 issn = {0360-0300},
 pages = {42:1--42:36},
 articleno = {42},
 numpages = {36},
 url = {http://doi.acm.org/10.1145/2673577},
 doi = {10.1145/2673577},
 acmid = {2673577},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Replicated state machines, consensus, voting},
}

@article{DBLP:journals/corr/HowardMS16,
  author    = {Heidi Howard and
               Dahlia Malkhi and
               Alexander Spiegelman},
  title     = {Flexible Paxos: Quorum intersection revisited},
  journal   = {CoRR},
  volume    = {abs/1608.06696},
  year      = {2016},
  url       = {http://arxiv.org/abs/1608.06696},
  archivePrefix = {arXiv},
  eprint    = {1608.06696},
  timestamp = {Wed, 07 Jun 2017 14:40:09 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/HowardMS16},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{fast-paxos,
author = {Lamport, Leslie},
title = {Fast Paxos},
booktitle = {},
year = {2006},
month = {October},
abstract = {The Paxos consensus algorithm of [122] requires two message delays between when the leader proposes a value and when other processes learn that the value has been chosen. Since inventing Paxos, I had thought that this was the optimal message delay. However, sometime in late 2001 I realized that in most systems that use consensus, values aren't picked out of the air by the system itself; instead, they come from clients. When one counts the message from the client, Paxos requires three message delays. This led me to wonder whether consensus in two message delays, including the client's message, was in fact possible. I proved the lower-bound result announced in [143] that an algorithm that can make progress despite f faults and can achieve consensus in two message delays despite e faults requires more than 2e+f processes. The proof of that result led me pretty quickly to the Fast Paxos algorithm described here. Fast Paxos generalizes the classic Paxos consensus algorithm. It can switch between learning in two or three message delays depending on how many processes are working. More precisely, it can achieve learning in two message delays only in the absence of concurrent conflicting proposals, which [153] shows is the best a general algorithm can do.},
publisher = {},
url = {https://www.microsoft.com/en-us/research/publication/fast-paxos/},
address = {},
pages = {79-103},
journal = {Distributed Computing},
volume = {19},
chapter = {},
isbn = {},
}

@inproceedings{Burrows:2006:CLS:1298455.1298487,
 author = {Burrows, Mike},
 title = {The Chubby Lock Service for Loosely-coupled Distributed Systems},
 booktitle = {Proceedings of the 7th Symposium on Operating Systems Design and Implementation},
 series = {OSDI '06},
 year = {2006},
 isbn = {1-931971-47-1},
 location = {Seattle, Washington},
 pages = {335--350},
 numpages = {16},
 url = {http://dl.acm.org/citation.cfm?id=1298455.1298487},
 acmid = {1298487},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
}

@techreport{autopilot-automatic-data-center-management,
author = {Isard, Michael},
title = {Autopilot: Automatic Data Center Management},
booktitle = {},
year = {2007},
month = {April},
abstract = {Microsoft is rapidly increasing the number of large-scale web services that it operates. Services such as Windows Live Search and Windows Live Mail operate from data centers that contain tens or hundreds of thousands of computers, and it is essential that these data centers function reliably with minimal human intervention. This paper describes the first version of Autopilot, the automatic data center management infrastructure developed within Microsoft over the last few years. Autopilot is responsible for automating software provisioning and deployment; system monitoring; and carrying out repair actions to deal with faulty software and hardware. A key assumption underlying Autopilot is that the services built on it must be designed to be manageable. We also therefore outline the best practices adopted by applications that run on Autopilot.},
publisher = {},
url = {https://www.microsoft.com/en-us/research/publication/autopilot-automatic-data-center-management/},
address = {},
pages = {60-67},
journal = {Operating Systems Review},
volume = {41},
chapter = {},
isbn = {},
}

@article{Schneider:1990:IFS:98163.98167,
 author = {Schneider, Fred B.},
 title = {Implementing Fault-tolerant Services Using the State Machine Approach: A Tutorial},
 journal = {ACM Comput. Surv.},
 issue_date = {Dec. 1990},
 volume = {22},
 number = {4},
 month = dec,
 year = {1990},
 issn = {0360-0300},
 pages = {299--319},
 numpages = {21},
 url = {http://doi.acm.org/10.1145/98163.98167},
 doi = {10.1145/98163.98167},
 acmid = {98167},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@article{Rodrigues:2003:ABA:942591.942742,
 author = {Rodrigues, Lu\'{\i}s and Raynal, Michel},
 title = {Atomic Broadcast in Asynchronous Crash-Recovery Distributed Systems and Its Use in Quorum-Based Replication},
 journal = {IEEE Trans. on Knowl. and Data Eng.},
 issue_date = {September 2003},
 volume = {15},
 number = {5},
 month = sep,
 year = {2003},
 issn = {1041-4347},
 pages = {1206--1217},
 numpages = {12},
 url = {http://dx.doi.org/10.1109/TKDE.2003.1232273},
 doi = {10.1109/TKDE.2003.1232273},
 acmid = {942742},
 publisher = {IEEE Educational Activities Department},
 address = {Piscataway, NJ, USA},
 keywords = {Distributed fault-tolerance, asynchronous systems, atomic broadcast, consensus, crash/recovery, quorum, replica management, weighted voting.},
} 

@inproceedings{Ongaro:2014:SUC:2643634.2643666,
 author = {Ongaro, Diego and Ousterhout, John},
 title = {In Search of an Understandable Consensus Algorithm},
 booktitle = {Proceedings of the 2014 USENIX Conference on USENIX Annual Technical Conference},
 series = {USENIX ATC'14},
 year = {2014},
 isbn = {978-1-931971-10-2},
 location = {Philadelphia, PA},
 pages = {305--320},
 numpages = {16},
 url = {http://dl.acm.org/citation.cfm?id=2643634.2643666},
 acmid = {2643666},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
} 

@inproceedings{Oki:1988:VRN:62546.62549,
 author = {Oki, Brian M. and Liskov, Barbara H.},
 title = {Viewstamped Replication: A New Primary Copy Method to Support Highly-Available Distributed Systems},
 booktitle = {Proceedings of the Seventh Annual ACM Symposium on Principles of Distributed Computing},
 series = {PODC '88},
 year = {1988},
 isbn = {0-89791-277-2},
 location = {Toronto, Ontario, Canada},
 pages = {8--17},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/62546.62549},
 doi = {10.1145/62546.62549},
 acmid = {62549},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

